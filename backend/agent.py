import re
from backend.db_utils import query_db
from backend.llm_utils import ask_ollama

# ✅ Clean SQL helper function
def clean_sql(llm_output):
    """
    Cleans LLM output and extracts a valid SQL SELECT statement
    """
    sql = llm_output.strip()
    sql = re.sub(r"```sql", "", sql, flags=re.IGNORECASE)
    sql = re.sub(r"```", "", sql)
    sql_lines = sql.splitlines()
    valid_lines = [line.strip() for line in sql_lines if line.strip().lower().startswith(('select', 'with'))]
    cleaned_sql = ' '.join(valid_lines)
    return cleaned_sql.strip()

# ✅ Improved agent to handle flexible questions + known patterns
def process_question(question):
    q = question.lower()
    explanation = None
    sql_query = None

    # ✅ Known Q&A fallback queries for total safety and accuracy
    if "total sales" in q and "per item" not in q:
        sql_query = "SELECT SUM(total_sales) AS total_sales FROM total_sales;"
        explanation = "🧾 This is the total revenue generated."
    elif "ad spend" in q and "average" not in q:
        sql_query = "SELECT SUM(ad_spend) AS total_ad_spend FROM ad_sales;"
        explanation = "💰 Total amount spent on advertisements."
    elif "units sold" in q and "per item" not in q:
        sql_query = "SELECT SUM(units_sold) AS total_units_sold FROM ad_sales;"
        explanation = "📦 Total number of items sold through ads."
    elif "impressions" in q and "average" not in q:
        sql_query = "SELECT SUM(impressions) AS total_impressions FROM ad_sales;"
        explanation = "👁️ Total number of ad impressions."
    elif "clicks" in q and "average" not in q:
        sql_query = "SELECT SUM(clicks) AS total_clicks FROM ad_sales;"
        explanation = "🖱️ Total number of ad clicks."
    elif "eligible items" in q or "currently eligible" in q:
        sql_query = "SELECT COUNT(*) AS eligible_items FROM eligibility WHERE eligibility = 1;"
        explanation = "✅ Items currently eligible for ads."
    elif "average impressions" in q:
        sql_query = "SELECT ROUND(AVG(impressions), 2) AS avg_impressions FROM ad_sales;"
        explanation = "📊 Average ad impressions per item."
    elif "average clicks" in q:
        sql_query = "SELECT ROUND(AVG(clicks), 2) AS avg_clicks FROM ad_sales;"
        explanation = "📈 Average number of ad clicks per item."
    elif "average ad spend" in q:
        sql_query = "SELECT ROUND(AVG(ad_spend), 2) AS avg_ad_spend FROM ad_sales;"
        explanation = "💸 Average amount of ad spend per item."
    elif "highest cpc" in q or "item with highest cpc" in q:
        sql_query = "SELECT item_id, ROUND(ad_spend * 1.0 / clicks, 2) AS cpc FROM ad_sales WHERE clicks > 0 ORDER BY cpc DESC LIMIT 1;"
        explanation = "🎯 Item with the highest cost-per-click (CPC)."
    elif "total units ordered per item" in q or ("units ordered" in q and "item" in q):
        sql_query = "SELECT item_id, SUM(total_units_ordered) AS total_units FROM total_sales GROUP BY item_id ORDER BY total_units DESC;"
        explanation = "📦 Units ordered per item based on actual sales."
    elif "eligibility status" in q or "eligible or not" in q:
        sql_query = "SELECT item_id, eligibility FROM eligibility;"
        explanation = "🔎 Eligibility status per item."
    elif "unique messages" in q:
        sql_query = "SELECT DISTINCT message FROM eligibility WHERE message IS NOT NULL;"
        explanation = "💬 Unique messages related to eligibility."

    # If no fallback match, use the LLM
    if not sql_query:
        prompt = f"""
You are a professional SQL assistant. Use ONLY the following tables and their columns:

- ad_sales(date, item_id, ad_sales, impressions, ad_spend, clicks, units_sold)
- total_sales(date, item_id, total_sales, total_units_ordered)
- eligibility(eligibility_datetime_utc, item_id, eligibility, message)

Rules:
- Never use undefined columns.
- Do NOT use fake or example values like 'product_id_example'.
- DO NOT include markdown blocks or explanation. Return only a single SQL SELECT query.

User question: {question}
        """
        llm_output = ask_ollama(prompt, model="orca-mini")
        print("🧠 LLM Output:", repr(llm_output))
        sql_query = clean_sql(llm_output)
        explanation = "🤖 Query generated by the model."

    print("🧹 Final SQL Query:", sql_query)

    # 🛡️ Final validation
    if not sql_query or not sql_query.lower().startswith(('select', 'with')):
        return "❌ Invalid or unsupported query generated."

    # 🔍 Execute database query
    cols, rows = query_db(sql_query)

    # 🧾 Format the output
    if cols and rows:
        response = f"{explanation}\n\n"
        response += " | ".join(cols) + "\n"
        response += "-" * 60 + "\n"
        for row in rows:
            response += " | ".join(str(cell) for cell in row) + "\n"
        return response, sql_query

    elif cols and not rows:
        return "⚠️ Query executed but returned no data."
    else:
        return "❌ Query failed. Please check your question or data."
